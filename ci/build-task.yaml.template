apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-gardenlinux-task
  namespace: gardenlinux-tkn
spec:
  params:
    - name: 'suite'
      type: 'string'
      default: 'bullseye'
      description: 'Debian release (buster, bullseye, ..)'
    - name: 'architecture'
      type: 'string'
      description: 'the build architecture (currently, only amd64 is supported)'
      default: 'amd64'
    - name: 'platform'
      type: 'string'
      description: 'the target platform (aws, gcp, metal, kvm, ..)'
    - name: 'modifiers'
      type: 'string'
      description: 'the build modifiers'
    - name: 'fnameprefix'
      type: 'string'
      description: 'upload filename prefix (workaround until garden-build.sh supports this'
    - name: 'giturl'
      type: 'string'
      default: 'ssh://git@github.com/gardenlinux/gardenlinux'
      description: 'git repository url'
    - name: 'committish'
      type: 'string'
      description: 'the committish to build'
      default: 'master'
    - name: 'gardenlinux_epoch'
      type: 'string'
      description: 'the gardenlinux epoch to use for as snapshot repo timestamp'
    - name: 'snapshot_timestamp'
      type: 'string'
      description: 'the snapshot timestamp (calculated from gardenlinux_epoch)'
    - name: 'repodir'
      description: 'path to gardenlinux repository worktree'
      default: '/workspace/gardenlinux_git'
    - name: 'cicd_cfg_name'
      description: 'the cicd cfg to use (see cicd.yaml)'
      default: 'default'
    - name: 'outfile'
      description: 'build result file (parameter is used to pass between steps)'
      type: 'string'
      default: '/workspace/gardenlinux.out'
    - name: 'version'
      description: 'the target version to build / release'
      type: 'string'
    - name: 'flavourset'
      description: 'the flavourset name this task is a part of'
      type: 'string'
      default: 'all'
    - name: 'promote_target'
      description: 'the promotion target (snapshots|daily|release)'
      type: 'string'
      default: 'snapshots'
  steps:
    - name: 'retrieve-repository' # patched-in through render_task.py
    - name: 'pre-build'           # patched-in through render_task.py
      image: 'eu.gcr.io/gardener-project/cc/job-image:1.664.0'
      script: |
        #!/usr/bin/env python3
        # requires github.com/gardener/cc-utils
        import dataclasses
        import datetime
        import os
        import sys
        # XXX add code from `ci/` to PYTHONPATH
        sys.path.insert(1, os.path.abspath(os.path.join('$(params.repodir)', 'ci')))

        import ccc.aws

        import glci.model
        import glci.util

        cicd_cfg = glci.util.cicd_cfg(cfg_name='$(params.cicd_cfg_name)')
        aws_cfg_name = cicd_cfg.build.aws_cfg_name
        s3_bucket_name = cicd_cfg.build.s3_bucket_name
        session = ccc.aws.session(aws_cfg_name)
        s3_client = session.client('s3')

        modifiers = tuple([m for m in '$(params.modifiers)'.split(',') if m])

        release_identifier = glci.model.ReleaseIdentifier(
          build_committish='$(params.committish)',
          version='$(params.version)',
          gardenlinux_epoch=$(params.gardenlinux_epoch),
          architecture=glci.model.Architecture('$(params.architecture)'),
          platform='$(params.platform)',
          modifiers=modifiers,
        )

        if glci.util.find_release(
          s3_client=s3_client,
          bucket_name=s3_bucket_name,
          release_identifier=release_identifier,
          prefix=glci.model.ReleaseManifest.manifest_key_prefix,
        ):
          with open('/workspace/skip_build', 'w') as f:
            f.write('skip build (already done)')
          print('build already done - telling next step to skip (/workspace/skip_build touched)')
        else:
          print('no matching build results found - will perform build')

    - name: 'build-image'
      resources:
        requests:
          memory: 1Gi
        limits:
          memory: 1.5Gi
      securityContext:
        privileged: true
        allowPrivilegeEscalation: true
        capabilities:
          add:
            - 'SYS_ADMIN'
      image: eu.gcr.io/gardener-project/gardenlinux/imagebuild_image:0.10.0-SAP
      script: |
        #!/usr/bin/env sh
        set -u
        set -x
        if [ -f '/workspace/skip_build' ]; then
          echo 'found /workspace/skip_build - skipping build'
          exit 0
        fi
        suite="$(params.suite)"
        gardenlinux_epoch='$(params.gardenlinux_epoch)'
        timestamp='$(params.snapshot_timestamp)'
        features="$(params.platform),$(params.modifiers)"
        echo "features: ${features}"
        export OUT_DIR="/build"
        ls -la /build
        export OUT_FILE="$(params.outfile)"

        pwd
        echo "running build.."
        $(params.repodir)/bin/garden-build.sh \
          --arch $(params.architecture) \
          --commitid '$(params.committish)' \
          --prefix "" \
          --suite $(params.suite) \
          --version "$(params.version)" \
          --timestamp "${timestamp}" \
          --features "${features}"
        ls -la "${OUT_FILE}"
        tar tf "${OUT_FILE}"
        if [ -f "${OUT_FILE}" ]; then
          echo "seems, like we might have succeeded?"
        else
          echo "no archive was created - see build log above for errors"
          exit 1
        fi
      volumeMounts:
      - mountPath: '/dev'
        name: 'dev'
      - mountPath: '/build'
        name: 'build'

    - name: 'upload-results' # patched-in through render_task.py

  volumes:
    - name: dev
      hostPath:
        path: '/dev'
        type: 'Directory'
    - name: build
      emptyDir:
        medium: "Memory"
