--- aa/debian/patches/series.org	2020-11-24 23:16:32.300719578 +0000
+++ bb/debian/patches/series	2020-11-24 23:15:29.848717536 +0000
@@ -9,3 +9,4 @@
 debian/Set-defaults-for-zfs-tools.patch
 debian/Revert-m4-virt-xdr-rewrite-XDR-check.patch
 debian/Use-sensible-editor-by-default.patch
+attach.patch
--- aa/debian/patches/attach.patch	1970-01-01 00:00:00.000000000 +0000
+++ bb/debian/patches/attach.patch	2020-11-24 23:01:41.704670170 +0000
@@ -0,0 +1,106 @@
+--- aa/src/qemu/qemu_driver.c	2020-11-02 10:16:52.000000000 +0000
++++ bb/src/qemu/qemu_driver.c	2020-11-24 22:48:46.144662613 +0000
+@@ -20122,6 +20122,94 @@
+     return ret;
+ }
+
++static virDomainPtr qemuDomainQemuAttach(virConnectPtr conn,
++                                         unsigned int pid_value,
++                                         unsigned int flags)
++{
++    virQEMUDriverPtr driver = conn->privateData;
++    virDomainObjPtr vm = NULL;
++    virDomainDefPtr def = NULL;
++    virDomainPtr dom = NULL;
++    virDomainChrSourceDefPtr monConfig = NULL;
++    bool monJSON = false;
++    pid_t pid = pid_value;
++    char *pidfile = NULL;
++    virQEMUCapsPtr qemuCaps = NULL;
++    virCapsPtr caps = NULL;
++
++    virCheckFlags(0, NULL);
++
++    if (!(caps = virQEMUDriverGetCapabilities(driver, false)))
++        goto cleanup;
++
++    if (!(def = qemuParseCommandLinePid(driver->qemuCapsCache,
++                                        caps, driver->xmlopt, pid,
++                                        &pidfile, &monConfig, &monJSON)))
++        goto cleanup;
++
++    if (virDomainQemuAttachEnsureACL(conn, def) < 0)
++        goto cleanup;
++
++    if (!monConfig) {
++        virReportError(VIR_ERR_CONFIG_UNSUPPORTED,
++                       _("No monitor connection for pid %u"), pid_value);
++        goto cleanup;
++    }
++    if (monConfig->type != VIR_DOMAIN_CHR_TYPE_UNIX) {
++        virReportError(VIR_ERR_CONFIG_UNSUPPORTED,
++                       _("Cannot connect to monitor connection of type '%s' "
++                         "for pid %u"),
++                       virDomainChrTypeToString(monConfig->type),
++                       pid_value);
++        goto cleanup;
++    }
++
++    if (!(def->name) &&
++        virAsprintf(&def->name, "attach-pid-%u", pid_value) < 0)
++        goto cleanup;
++
++    if (!(qemuCaps = virQEMUCapsCacheLookup(driver->qemuCapsCache,
++                                            def->emulator)))
++        goto cleanup;
++
++    if (qemuAssignDeviceAliases(def, qemuCaps) < 0)
++        goto cleanup;
++
++    if (!(vm = virDomainObjListAdd(driver->domains, def,
++                                   driver->xmlopt,
++                                   VIR_DOMAIN_OBJ_LIST_ADD_LIVE |
++                                   VIR_DOMAIN_OBJ_LIST_ADD_CHECK_LIVE,
++                                   NULL)))
++        goto cleanup;
++
++    def = NULL;
++
++    if (qemuDomainObjBeginJob(driver, vm, QEMU_JOB_MODIFY) < 0) {
++        qemuDomainRemoveInactive(driver, vm);
++        goto cleanup;
++    }
++
++    if (qemuProcessAttach(conn, driver, vm, pid,
++                          pidfile, monConfig, monJSON) < 0) {
++        qemuDomainRemoveInactive(driver, vm);
++        qemuDomainObjEndJob(driver, vm);
++        goto cleanup;
++    }
++
++    dom = virGetDomain(conn, vm->def->name, vm->def->uuid, vm->def->id);
++
++    qemuDomainObjEndJob(driver, vm);
++
++ cleanup:
++    virDomainDefFree(def);
++    virObjectUnref(monConfig);
++    virDomainObjEndAPI(&vm);
++    VIR_FREE(pidfile);
++    virObjectUnref(caps);
++    virObjectUnref(qemuCaps);
++    return dom;
++}
++
+
+ static virHypervisorDriver qemuHypervisorDriver = {
+     .name = QEMU_DRIVER_NAME,
+@@ -20277,7 +20365,7 @@
+     .domainRevertToSnapshot = qemuDomainRevertToSnapshot, /* 0.8.0 */
+     .domainSnapshotDelete = qemuDomainSnapshotDelete, /* 0.8.0 */
+     .domainQemuMonitorCommand = qemuDomainQemuMonitorCommand, /* 0.8.3 */
+-    .domainQemuAttach = NULL, /* 0.9.4 - 5.5.0 */
++    .domainQemuAttach = qemuDomainQemuAttach, /* 0.9.4 */
+     .domainQemuAgentCommand = qemuDomainQemuAgentCommand, /* 0.10.0 */
+     .connectDomainQemuMonitorEventRegister = qemuConnectDomainQemuMonitorEventRegister, /* 1.2.3 */
+     .connectDomainQemuMonitorEventDeregister = qemuConnectDomainQemuMonitorEventDeregister, /* 1.2.3 */
