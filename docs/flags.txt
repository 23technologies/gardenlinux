GARDENLINUX_FLAGS="_NOPKG,_READONLY,_PROD"

in folder features:
any file ending .yaml is a flag!
reference to a flag is always with _

_dev.yaml = flag slim

_dev
---
description: "xxx"
type: flag
features:
  includes:
    - build
  excludes:
    - _slim


include builds the feature tree as in features 
and exclude removes "hard" = flag -> delete the flag and decendents


	*
AWS      chost    _dev[no _slim]    _prod[no build]
cloud    base     build             _nopkg
server   _slim    base              _readonly
base     GCP      _slim
_slim

build up process:

features list: base,server,cloud,AWS,chost,build -> reduced bottom-up traversal (if it is already in the list do not mention again, all dependencies of an item are mentioned first)
flag list: slim, dev, readonly, nopkg, prod (reduced list by mentioning)

excludes: _slim, build -> check if element in tree and raise error if there (excludes in yaml means: i am incompatible)

commandline parameter:
--features= first line of the tree (AWS,      chost,   _dev,    _prod) (enter in any order)
--ignore= _slim, build  (if you hit in tree creation, ignore)
  warning for both ignores, but continue to process and ignores them

garden-feat commands:
  platform -> gives the platform out of --features and --ignore parameter -> error if more or less than one platform exist in tree
              (implies that platfroms can be dependencies and platforms can be ignored)
  expand -> gives features list as in "build up process" (ordered by tree)
  flags  -> gives flag list as in build up process
  cname  -> gives minimal feature list (duplicates removed) and flags added and also minimized output ordered like:
            platform - features (alphanum sorted, divided by -) flags (alphanum sorted (_ is ipmlicit in the name))
  ignore -> gives the ignore parameter but only the ones used in alphanum sorted  

  parameters -> $1 -> root of the yam 

=> aws-chost_dev_prod_184.0.<functional extension>     
  

