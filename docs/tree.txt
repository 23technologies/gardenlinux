PRETTY_NAME="Garden Linux"
NAME="Debian GNU/Linux"
ID=debian
DEBIAN_RELEASE=bullseye
GARDENLINUX_VERSION=79.0
GARDENLINUX_COMMIT_ID=2693cfb57ea1819c8f2c2dd0212124f2c305eb1a
GARDENLINUX_PLATFORM="AWS"
GARDENLINUX_FEATURES="BASE,SERVER,CLOUD,AWS,CHOST,VHOST"
GARDENLINUX_MODIFIER="_NOPKG,_READONLY,_PROD"
HOME_URL="https://gardenlinux.io/"
SUPPORT_URL="https://github.com/gardenlinux/gardenlinux"
BUG_REPORT_URL="https://github.com/gardenlinux/gardenlinux/issues"


AWS-BASE-SERVER-CLOUD-CHOST_NOPKG_READONLY_PROD

AWS-BASE-SERVER-CLOUD-CHOST_NOPKG_READONLY_PROD

AWS-BASE-CHOST-CLOUD-SERVER_NOPKG_PROD_READONLY


AWS-CHOST_PROD
BASE,SERVER,CLOUD,AWS,CHOST,_NOPKG,_READONLY,_PROD

build graph
UPPERCASE ASCII-SORT 1lvl-after-root (Platform first, modifiers last)
entferne alle knoten aus baum ohne das sich eine serialize uniq nicht aendert



                 (root)
   AWS        (BERTA)   CHOST  (SERVER) (VHOST)        _PROD
  CLOUD       (VHOST)   BERTA   (BASE)  (SERVER)     _READONLY
 SERVER HORST     s B   VHOST           (BASE)       _NOPKG
 BASE                   (SERVER)                     EXCL:_SLIM
_SLIM                        (BASE)

* AWS1 BERTA2 CHOST SERVER VHOST _PROD




example: aws-gardener-chost-example_prod_slim (defines the first row in tree)
p = platform, m = modifier s= something
ORDER input: platform 1st, something ordered alphabetical, modifiers last but ordered alphabetical
platform or a something you can hard depend on 
_modifiers modify the image but do not provide elements

one info.yaml per feature
features/include in info.yaml 
   - builds the tree
     - entries in this list are considered ordered, but there is no semantic in the order yet -> only for deteminism)
features/exclude removes modifiers from the tree (!treewide delete with subtrees, errors if platform or somethine is included)


tree
                 [root]
      aws(p)        gardener    [chost]    example     _prod(m)    _slim(m)       (mandatory)
     cloud         server      [server]   [no: chost]  _readonly
  server right    base         [ base]                 _nopkg
 base     a        _slim        [_slim]
_slim     b 

excludemap: = list of all features/exclude

first iteration
  build tree and exclude map
  avoid circle by creating a path map (aws cloud server base _slim )

  start_doing
    for all entries e in features_paramete do
      build_tree("", e, tree)
 
  build_tree("":circle_avoidance, "aws", tree)
    read info.yaml
    child to tree aws
    for all entries e in features/include
      if e is in not circle_avoidance then 
        build_tree("aws", e, tree)

second iteration: []
  remove all excludes from tree if they are modifiers error if include before from something or platform

  
command max traverse from left bottom to right top 
  _slim, base, server, b, a, right, cloud, aws, [no _slim, no base, no server] gardener, example, _nopkg, _readonly, _prod [no slim]
  implicit ordered by the thing with no dependencies fist (based on traversl algorithm) and all elments are unique

command min -> reduce to the minimum
  traverse from 1st line left
  everything of the subtree gets deleted in whole tree

  aws-gardener_prod-184.0.<extensions>

command description -> give all description entries for the specified features
  

BASE,SERVER,CLOUD,AWS,CHOST,VHOST,_NOPKG,_READONLY,_PROD


   *
CHOST   AWS    CHOST  SERVER  VHOST      _PROD
SERVER  CLOUD  SERVER BASE    SERVER     _READONLY
BASE    SERVER BASE           BASE       _NOPKG
        BASE



AWS-CHOST-VHOST_PROD

aws-gardener_prod-000be2-snapshot.manifest

