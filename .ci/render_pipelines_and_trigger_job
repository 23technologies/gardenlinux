#!/usr/bin/env bash
set -e
set -x

own_dir="$(readlink -f "$(dirname "${0}")")"

source "${own_dir}/lib.sh"

install_kubectl
install_tkn

# retrieve and configure kubeconfig (sets KUBECONFIG env var)
kubecfg

export_env

function cleanup_pipelineruns {
  echo "purging old pipelineruns"
  tkn \
    --namespace "${GARDENLINUX_TKN_WS}" \
    pipelineruns \
    delete \
    --force \
    --all \
    --keep 20
}


echo "render pipelines"
gardenlinux_dir="${CC_ROOT_DIR}/${GARDENLINUX_PATH}"
cd "${gardenlinux_dir}"

pipeline_cfg="${gardenlinux_dir}/flavours.yaml"
outfile='rendered_pipeline.yaml'

# injected from pipeline_definitions
PROMOTE_TARGET="${PROMOTE_TARGET:-snapshot}"
PUBLISHING_ACTIONS="${PUBLISHING_ACTIONS:-manifests}"

if [ ! -z "${VERSION:-}" ]; then
  EXTRA_ARGS="--version=${VERSION}"
fi

cleanup_pipelineruns

head_commit="$(git rev-parse @)"
echo "head-commit: ${head_commit}"

pipeline_run="$PWD/pipeline_run.yaml"
rendered_task="$PWD/rendered_task.yaml"

# create pipeline-run for current commit
ci/render_pipeline_run.py $EXTRA_ARGS \
  --branch "${BRANCH_NAME}" \
  --committish "${head_commit}" \
  --cicd-cfg 'default' \
  --flavour-set "${FLAVOUR_SET}" \
  --promote-target "${PROMOTE_TARGET}" \
  --publishing-action "${PUBLISHING_ACTIONS}" \
  --outfile "${pipeline_run}"

ci/render_pipelines.py \
  --pipeline_cfg "${pipeline_cfg}" \
  --flavour-set "${FLAVOUR_SET}" \
  --cicd-cfg 'default' \
  --outfile "${outfile}"

ci/render_task.py \
  --outfile "${rendered_task}"

# XXX hardcode other resources for now

for manifest in \
  "${rendered_task}" \
  "${outfile}" \
  "${pipeline_run}"
do
  $(which kubectl) apply -n "${GARDENLINUX_TKN_WS}" -f "${manifest}"
done

echo 'done: refreshed pipeline(s) and created a new pipeline-run for current commit'

echo 'will wait for new pipelinerun'
ci/wait_for_pipelinerun.py --pipelinerun-file "${pipeline_run}" --namespace "${GARDENLINUX_TKN_WS}"
