#!/usr/bin/env bash
set -Eeuo pipefail

# TODO: add -runas

thisDir="$(dirname "$(readlink -f "$BASH_SOURCE")")"
source "$thisDir/.constants.sh" \
	--flags 'cpu:,mem:,disk:,bridge:,port:' \
	--flags 'daemonize' \
	--flags 'pxelocal:' \
	--flags 'pxe:' \
	--flags 'uefi' \
	--flags 'ueficode:' \
	--flags 'uefivars:' \
	-- \
	'[--cpu:3] [--mem:16384] [--disk:3G] [--daemonize] [--pxe:dir] [--pxelocal] <image file>' \
	'example'

eval "$dgetopt"
cpu=2
memory=2048
disk=-1
bridge=
daemonize=
pxe=
pxeConfig=
pxeLocal=
port=2223
uefi=
uefiCode=/usr/share/OVMF/OVMF_CODE.fd
uefiVars=/usr/share/OVMF/OVMF_VARS.fd
while true; do
	flag="$1"; shift
	dgetopt-case "$flag"
	case "$flag" in
		--cpu)		cpu="$1"; 	shift ;;
		--mem)		memory="$1"; 	shift ;;
		--disk)		disk="$(numfmt --from=auto --suffix="B" --format "%f" $1 | head -c-2)"; 
						shift ;;
		--daemonize) 	daemonize=1; 	;;
		--bridge ) 	bridge="$1";  	shift ;;
		--pxe )         pxe="$1";       shift ;;
		--pxelocal)     pxeLocal="$1";  shift ;;
		--port)         port="$1";  shift ;;
		--uefi) 	uefi=1; 	;;
		--ueficode)     uefiCode="$1";  shift ;;
		--uefivars)     uefiVars="$1";  shift ;;
		--) break ;;
		*) eusage "unknown flag '$flag'" ;;
	esac
done

hasImage=1
if [ "$pxe" -o "$pxeLocal" ]; then
	hasImage=
fi

if [ $hasImage ]; then
	imagefile="${1:-}";     shift || eusage 'missing image file to start'
	[ ! -s $imagefile ] && ( echo "file does not exist"; exit 1; )
fi

virtOpts=(
	-smp $cpu
	-m $memory
	)
# add a watchdog to maintain auto reboot 
virtOpts+=( -watchdog i6300esb )

# make sure memory grows on demand
virtOpts+=( -device virtio-balloon )

# adding the random number generator of the host
virtOpts+=(
	-device virtio-rng-pci,rng=rng0
	-object rng-random,id=rng0,filename=/dev/random
	)

# daemonize
if [ $daemonize ]; then
	virtOpts+=(
		-display none
		-daemonize
		)
else
	virtOpts+=(
		-nographic
		)
fi

# uefi
if [ $uefi ]; then
	if [ ! -f $uefiCode ]; then
		eusage "Missing ueficode at $ueficode.\n Run: apt-get install ovmf"
	fi
	if [ ! -f $uefiVars ]; then
		eusage "Missing uefivars at $uefiVars.\n Run: apt-get install ovmf"
	fi

	virtOpts+=(
		-machine q35,smm=on
		-global driver=cfi.pflash01,property=secure,value=on
		-drive if=pflash,format=raw,unit=0,file=${uefiCode},readonly=on
		-drive if=pflash,format=raw,unit=1,file=${uefiVars}
	)
fi

# disk
if [ $hasImage ]; then
	if [ $(stat --printf="%s" $imagefile) -lt $disk ]; then
		# disk grows if requested size then is bigger then image size 
		dd if=/dev/zero of=$imagefile count=0 bs=1 seek=$disk
	fi
	imageext=${imagefile##*.}
	case $imageext in
		vhd | vpc ) imageext="vpc" ;;
	esac
	virtOpts+=(
		-device virtio-scsi-pci,id=scsi0
		-device scsi-hd,drive=drive0,bus=scsi0.0
			-drive format=$imageext,if=none,discard=unmap,aio=native,cache.direct=on,id=drive0,file=$imagefile
		)
fi

# pxe
# TODO : a disk image is not needed when booting via pxe

if [ "$pxe" -o "$pxeLocal" ]; then
	tempDir=$(mktemp -d)
	rand=$(uuidgen)
	mkdir -p "$thisDir/../hack/pxe/$rand"
	trap 'echo "Cleaning up ..."; rm -rf "$tempDir"; rm -rf "$thisDir/../hack/pxe/$rand"' EXIT

	if [ "$pxeLocal" ]; then
		# copy the kernel image and initramfs to be able to be booted from PXE
		cp "$pxeLocal/"{rootfs.initrd,rootfs.vmlinuz} "$tempDir/"
		cp "$pxeLocal/root.squashfs" "$tempDir/"
		cp "$thisDir/.boot.pxe" "$tempDir/boot.pxe"
		cp "$thisDir/*.ign" "$tempDir/" || true
		# modify the boot.pxe to load the proper kernel and initramfs
		sed -i "s/PATHGOESHERE//" "${tempDir}/boot.pxe" 
		sed -i "s/IPADDRESSGOESHERE/10.0.2.2/" "${tempDir}/boot.pxe" 
	else
		# copy the kernel image and initramfs to be able to be booted from PXE
		cp "$pxe/{rootfs.initrd,rootfs.vmlinuz}" "$thisDir/../hack/pxe/$rand/"
		cp "$thisDir/.boot.pxe" "$tempDir/boot.pxe"

		# modify the boot.pxe to load the proper kernel and initramfs
		# TODO : get ip as parameter or load from config or something else
		sed -i "s/PATHGOESHERE/pxe\/${rand}/" "${tempDir}/boot.pxe" 
		sed -i "s/IPADDRESSGOESHERE/172.31.31.177/" "${tempDir}/boot.pxe" 
	fi
	pxeConfig=",tftp=$tempDir,bootfile=/boot.pxe"
	virtOpts+=( -boot order=nc )

fi
# network
macaddr="$(printf '02:%02X:%02X:%02X:%02X:%02X' $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)))"
if [ $bridge ]; then
	tmp="$(echo -e "$(cat /etc/qemu/bridge.conf)\nallow mgmt" | sort -u | sed '/^$/d')"
	echo "$tmp" > /etc/qemu/bridge.conf
	virtOpts+=( -netdev bridge,id=net0,br=mgmt"$pxeConfig" )
else
	virtOpts+=( -netdev user,id=net0,hostfwd=tcp::$port-:22,hostname=garden"$pxeConfig" )
fi
virtOpts+=( -device virtio-net-pci,netdev=net0,mac=$macaddr )

# virtualization tech
cpuinfo="$(grep "^flags" /proc/cpuinfo | uniq)"
if [ "$(echo $cpuinfo | grep vmx)" != "" -o "$(echo $cpuinfo | grep svm)" != "" ]; then
	virtOpts+=(
		-enable-kvm
		-cpu host
		)
fi

echo "qemu-system-x86_64 ${virtOpts[@]}"
echo
echo "Press Enter to boot"
read a
qemu-system-x86_64 ${virtOpts[@]}


